name: Push Image to Docker Hub & Deploy to AWS
on:
  push:
    branches:
      - master
jobs:
  # Checkout and test
  check:
    outputs:
      status: ${{ steps.test.conclusion }}
    runs-on: ubuntu-latest
    environment: AWS Credentials
    steps:
      - # 授權 Github 取用 repository
        name: Checkout Latest Repo
        uses: actions/checkout@v2
      - # 設定 AWS Credentials
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - # 測試 Docker images
        id: test
        name: Build and testing Docker images
        # 設定 -e CI=true 可以讓 test 只運行一次就退出
        run: |
          echo "Build docker images for testing..."
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/springboot_onlinestore_backend-test -f ./Dockerfile.dev .
          echo "Run react tests with built Docker images..."
          docker run -e CI=true ${{ secrets.DOCKER_HUB_USERNAME }}/springboot_onlinestore_backend-test

  # Build and push to Docker Hub
  push_image_to_docker_hub:
    needs: [ check ]
    if: needs.check.outputs.status == 'success'
    outputs:
      status: ${{ steps.push.conclusion }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Latest Repo
        uses: actions/checkout@v2
      - # install QEMU static binaries(靜態二進制文件)
        # QEMU is a generic and open source machine & userspace emulator and virtualizer.
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - # 創建一個 Docker 建構器
        id: buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - # 登入 Docker Hub
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - # Build & Push to Docker Hub
        id: push
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/springboot_onlinestore_backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/springboot_onlinestore_backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/springboot_onlinestore_backend:buildcache,mode=max

  # Deploy to AWS Elastic Beanstalk
  deploy_to_aws:
    needs: [ push_image_to_docker_hub ]
    if: needs.push_image_to_docker_hub.outputs.status == 'success'
    runs-on: ubuntu-latest
    steps:
      - # actions/checkout@v2 checks-out repository under $GITHUB_WORKSPACE, allow workflow access it.
        # 許可 github 去訪問這個 repository
        name: Checkout Latest Repo
        uses: actions/checkout@v2
      - # 打包壓縮成 zip 檔
        name: Generate Deployment Package
        run: zip -r deploy.zip *
      - # 取得當前時間
        id: current-time
        name: Get timestamp
        uses: gerred/actions/current-time@master
      - # einaregilsson/beanstalk-deploy@v20 自動部署到 AWS Elastic Beanstalk
        name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: SpringBoot_onlineStore_backEnd
          environment_name: Springbootonlinestorebackend-env
          version_label: "SpringBoot_onlineStore_backEnd-deployment-${{ steps.current-time.outputs.time }}"
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
